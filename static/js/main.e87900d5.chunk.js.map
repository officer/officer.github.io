{"version":3,"sources":["Header.tsx","Career.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","href","rel","target","React","Career","Badge","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAuBeA,E,4JAnBX,WACI,OACI,0BAASC,UAAU,SAAnB,UACI,qBAAKA,UAAU,QAAf,SACI,sBAAMA,UAAU,QAAhB,6BAIJ,sBAAKA,UAAU,MAAf,UACI,mBAAGA,UAAU,SAASC,KAAK,6BAA6BC,IAAI,sBAAqBC,OAAO,SAAxF,SAAiG,mBAAGH,UAAU,0BAC9G,mBAAGA,UAAU,WAAWC,KAAK,mDAAmDC,IAAI,sBAAqBC,OAAO,SAAhH,SAAyH,mBAAGH,UAAU,4BACrJ,mBAAGA,UAAU,OAAOC,KAAK,kCAAkCC,IAAI,sBAAqBC,OAAO,SAA3F,SAAoG,mBAAGH,UAAU,2BAClG,mBAAGA,UAAU,KAAKC,KAAK,uCAAuCC,IAAI,sBAAqBC,OAAO,SAA9F,SAAuG,mBAAGH,UAAU,6C,GAdnHI,a,OC6BNC,E,4JA3BX,WACI,OACI,0BAASL,UAAU,SAAnB,UACI,qBAAKA,UAAU,QAAf,SACI,sBAAMA,UAAU,QAAhB,sBAIhB,sBAAKA,UAAU,iBAAf,UACC,sBAAKA,UAAU,OAAf,UACC,gCAAK,cAACM,EAAA,EAAD,CAAOC,QAAQ,UAAf,+BAAkD,mDAAvD,eACA,8BAAK,gDAEN,sBAAKP,UAAU,OAAf,UACC,gCAAK,kEAAL,uBACA,8BAAK,6EAEN,sBAAKA,UAAU,OAAf,UACC,gCAAK,kDAAL,uBACA,8BAAK,mF,GApBUI,aCaNI,G,MAVO,WACpB,OACE,sBAAKR,UAAU,MAAf,UACE,cAAC,EAAD,IACH,uBACA,cAAC,EAAD,SCCiBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e87900d5.chunk.js","sourcesContent":["import * as React from 'react';\n\nclass Header extends React.Component {\n\n    render(){\n        return (\n            <section className=\"header\">\n                <div className=\"title\">\n                    <span className=\"title\">\n                        kasaiso's lab\n                    </span>\n                </div>\n                <div className=\"sns\">\n                    <a className=\"github\" href=\"https://github.com/officer\" rel=\"noopener noreferrer\"target=\"_blank\"><i className=\"fab fa-github fa-3x\"></i></a>\n                    <a className=\"linkedin\" href=\"https://www.linkedin.com/in/kasai-sohei-52813334\" rel=\"noopener noreferrer\"target=\"_blank\"><i className=\"fab fa-linkedin fa-3x\"></i></a>\n\t\t\t\t\t<a className=\"blog\" href=\"https://kasaiso.hatenablog.com/\" rel=\"noopener noreferrer\"target=\"_blank\"><i className=\"fab fa-blogger fa-3x\"></i></a>\n                    <a className=\"fb\" href=\"https://www.facebook.com/sohei.kasai\" rel=\"noopener noreferrer\"target=\"_blank\"><i className=\"fab fa-facebook-square fa-3x\"></i></a>\n                </div>                \n            </section>\n        );\n    }\n};\n\nexport default Header;","import * as React from 'react';\nimport Badge from 'react-bootstrap/Badge';\n\nclass Career extends React.Component {\n    render(){\n        return (\n            <section className=\"career\">\n                <div className=\"title\">\n                    <span className=\"title\">\n                        Career\n                    </span>\n                </div>\n\t\t\t\t<div className=\"career-details\">\n\t\t\t\t\t<div className=\"item\">\n\t\t\t\t\t\t<div><Badge variant=\"primary\">Currently Working</Badge><h2>Software Engineer</h2>2020/04 ~</div>\n\t\t\t\t\t\t<div><h6>at M3.Inc</h6></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"item\">\n\t\t\t\t\t\t<div><h2>Cloud Support Engineer/Associate</h2>2016/04 ~ 2020/02</div>\n\t\t\t\t\t\t<div><h6>at Amazon Web Services Japan/EMEA SARL</h6></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"item\">\n\t\t\t\t\t\t<div><h2>Systems Engineer</h2>2013/04 ~ 2016/03</div>\n\t\t\t\t\t\t<div><h6>at Nissay Information Technologies</h6></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            </section>\n        );\n    }\n};\n\nexport default Career;","import React from 'react';\nimport Header from './Header';\nimport Career from './Career';\nimport './App.css';\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n\t  <hr></hr>\n\t  <Career></Career>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}