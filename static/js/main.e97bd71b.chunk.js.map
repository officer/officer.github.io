{"version":3,"sources":["contents.tsx","categories.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Contents","className","React","Component","Categories","props","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAeeA,E,iLARP,OACI,yBAAKC,UAAU,iB,GALJC,IAAMC,WCqCdC,E,YArCX,WAAYC,GAAY,qEACdA,I,sEAIN,OACI,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,SACX,uBAAGA,UAAU,kBADjB,kBAIA,yBAAKA,UAAU,WACX,uBAAGA,UAAU,qBAAb,4JAEJ,yBAAKA,UAAU,SACX,uBAAGA,UAAU,kBADjB,iCAIA,yBAAKA,UAAU,WACX,uBAAGA,UAAU,qBAAb,wMAEJ,yBAAKA,UAAU,SACX,uBAAGA,UAAU,kBADjB,6BAIA,yBAAKA,UAAU,WACX,yIACA,uU,GA7BKC,IAAMC,WCahBG,EATO,WACpB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e97bd71b.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\n\n\nclass Contents extends React.Component<{}, {}> {\n\n\n    render() : ReactNode {\n        return (\n            <div className=\"contents\">\n\n            </div>\n        )\n    }\n}\n\nexport default Contents;","import React, { ReactNode } from 'react';\n\nclass Categories extends React.Component<{}, {}> {\n    constructor(props: any){\n        super(props);\n    };\n\n    render(): ReactNode {\n        return (\n            <div className=\"categories\">\n                <div className=\"ui accordion\">\n                <div className=\"title\">\n                    <i className=\"dropdown icon\"></i>\n                    What is a dog?\n                </div>\n                <div className=\"content\">\n                    <p className=\"transition hidden\">A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>\n                </div>\n                <div className=\"title\">\n                    <i className=\"dropdown icon\"></i>\n                    What kinds of dogs are there?\n                </div>\n                <div className=\"content\">\n                    <p className=\"transition hidden\">There are many breeds of dogs. Each breed varies in size and temperament. Owners often select a breed of dog that they find to be compatible with their own lifestyle and desires from a companion.</p>\n                </div>\n                <div className=\"title\">\n                    <i className=\"dropdown icon\"></i>\n                    How do you acquire a dog?\n                </div>\n                <div className=\"content\">\n                    <p>Three common ways for a prospective owner to acquire a dog is from pet shops, private owners, or shelters.</p>\n                    <p>A pet shop may be the most convenient way to buy a dog. Buying a dog from a private owner allows you to assess the pedigree and upbringing of your dog before choosing to take it home. Lastly, finding your dog from a shelter, helps give a good home to a dog who may not find one so readily.</p>\n                </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Categories;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Contents from './contents';\nimport Categories from './categories';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Categories/>\n      <Contents/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}